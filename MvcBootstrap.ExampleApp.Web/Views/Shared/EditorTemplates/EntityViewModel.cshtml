@model MvcBootstrap.ViewModels.IEntityViewModel
@using MvcBootstrap.Reflection
@using MvcBootstrap.ViewModels
@using MvcBootstrap.Web.Mvc.Views.Extensions
@using MvcBootstrap.Extensions

@if (Model == null)
{
    @ViewData.ModelMetadata.NullDisplayText
}
else if (ViewData.TemplateInfo.TemplateDepth > 1)
{
    @ViewData.ModelMetadata.SimpleDisplayText
}
else 
{
    foreach (var propMeta in ViewData.ModelMetadata.Properties.Where(meta => meta.ShouldShow(ViewContext))) 
    { 
        if (propMeta.HideSurroundingHtml)
        { 
            @Html.Editor(propMeta.PropertyName) 
        }
        else 
        {
            <div class="control-group">
                <label class="control-label">@propMeta.GetDisplayName()</label>
                <div class="controls">
                    @if (propMeta.ShouldEdit())
                    {
                        if (propMeta.Model != null &&
                            propMeta.Model.GetType().IsConstructedGenericTypeFor(typeof(Choice<>)))
                        {
                            @Html.Editor(propMeta.PropertyName, "RelatedChoice")
                        }
                        else if (
                            propMeta.Model != null &&
                            propMeta.Model.GetType().IsConstructedGenericTypeFor(typeof(Choices<>)))
                        {
                            @Html.Editor(propMeta.PropertyName, "RelatedChoices")
                        }
                        else
                        {
                            @Html.Editor(propMeta.PropertyName)
                        }

                        if (Model.ConcurrentlyEdited != null)
                        {
                            var enteredValue = ReflectionHelper.GetProperty(Model, propMeta.PropertyName);
                            var currentValue = ReflectionHelper.GetProperty(Model.ConcurrentlyEdited, propMeta.PropertyName);
                            bool sameValue = 
                                // Usually null is not considered to be equal to itself, but in the case of 'same value entered for property' it is.
                                enteredValue == null && currentValue == null || 
                                enteredValue != null && enteredValue.Equals(currentValue);
                            
                            <span class="muted">Current Value:</span>
                            <span class="@(sameValue ? "text-info" : "text-error")">
                                @currentValue
                            </span>
                        }
                    }
                    else
                    {
                        @Html.Display(propMeta.PropertyName)
                    }
                    
                    @Html.ValidationMessage(propMeta.PropertyName, new { @class="text-error" })
                </div>
            </div>
        } 
    } 
}