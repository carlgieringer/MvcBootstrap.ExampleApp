@using MvcBootstrap.ViewModels
@using MvcBootstrap.Web.Mvc.Views
@using MvcBootstrap.Web.Mvc.Views.Extensions
@model IList<IEntityViewModel>
@{
    var type = Model.GetType();
    Type underlyingType;
    if (type.IsArray)
    {
        underlyingType = type.GetElementType();
    }
    else
    {
        var genericArgs = type.GetGenericArguments();
        underlyingType = genericArgs[0];
    }
    
    var properties = ModelMetadataProviders.Current
        .GetMetadataForType(() => null, underlyingType)
        .Properties
        .Where(pm => pm.ShouldShow(ViewContext) && !pm.IsHiddenInput());
}

<table class="table table-striped">
    <thead>
        <tr>
            @foreach(var property in properties) 
            {
                <th>
                    @property.GetDisplayName() 
                </th>
            } 
            <th>
                <!-- Actions Dropdown -->
            </th>
        </tr>
    </thead>
    <tbody>
        @for (int i = 0; i < Model.Count; i++)
        {
            var itemMD = ModelMetadata.FromLambdaExpression(m => m[i], ViewData);
            int id = Model[i].Id.Value;
            <tr>
                @foreach (var property in properties)
                {
                    <td>
                        @{ var propertyMetadata = itemMD.Properties.Single(m => m.PropertyName == property.PropertyName); }
                        @if (propertyMetadata.IsComplexType)
                        {
                            @propertyMetadata.SimpleDisplayText
                        }
                        else
                        {
                            @Html.DisplayFor(m => propertyMetadata.Model)
                        }
                    </td>
                }
                <td>
                    <div class="btn-group pull-right">
                        @this.Bootstrap().ReadLink(id)
                        <button class="btn dropdown-toggle" data-toggle="dropdown">
                            <span class="caret"></span>
                        </button>
                        <ul class="dropdown-menu">
                            <li>
                                @this.Bootstrap().UpdateLink(id, style:ButtonStyle.None)
                            </li>
                            <li>
                                @this.Bootstrap().DeleteLink(id, style:ButtonStyle.None)
                            </li>
                        </ul>
                    </div>
                </td>     
                <td>
                
                </td>
            </tr>
        }
    </tbody>
</table>


